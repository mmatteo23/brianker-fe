// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String   @id
  name            String
  email           String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  address         String
  profileImage    String?
  monthlyCashback Float    @default(0)
  totalCashback   Float    @default(0)
  rank            Int      @default(0)

  gymId           String
  Gym             Gym               @relation(fields: [gymId], references: [id])
  Goal            Goal[]
  TrainingSession TrainingSession[]
}

model Owner {
  id        String   @id
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Gym       Gym[]
}

model Gym {
  id                 String            @id
  name               String
  monthlyFee         Float
  cashbackPercentage Float
  address            String
  flowRate           String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  User               User[]
  Owner              Owner?            @relation(fields: [ownerId], references: [id])
  ownerId            String?
  TrainingSession    TrainingSession[]
  Challenge          Challenge[]
}

model Goal {
  id          String   @id
  description String
  weekly      Int
  monthly     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [id])
  userId      String
}

model TrainingSession {
  id        String   @id
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cashback  Float?
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  gym       Gym      @relation(fields: [gymId], references: [id])
  gymId     String
}

model Challenge {
  id                String   @id
  name              String
  description       String
  deadline          DateTime
  numberOfTrainings Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  gym               Gym      @relation(fields: [gymId], references: [id])
  gymId             String
}
